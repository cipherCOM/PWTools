//
//  Shared.xcconfig
//  PWSoftware
//
//  Created by Kai Brüning on 17.2.10.
//  Copyright 2010 ProjectWizards. All rights reserved.
//
//  Base project-level configuration. These settings are shared by all our projects.
//
//
//  About our use of .xcconfig files:
//
//  Xcodes graphical build settings editor is nice, easy and fast to use. But is has two severe disadvantages:
//  - You can’t comment individual settings.
//  - It is very hard to control changes or check the history of a setting - comparing project files in text form is
//    no fun.
//  Therefore the goal is not to use the build settings editor at all for our production targets, but instead set
//  everything using .xcconfig files. Non-production targets as those for unit tests can be set up using the graphical
//  editor.
//
//  The idea is to keep the project level settings for most projects very similar. The default settings for the
//  project level are in PWSoftware/BuildSettings, with Shared.xcconfig being the base file and Debug.xcconfig,
//  and Release.xcconfig including and augmenting this file for our standard configurations.
//  The typical project should base its configurations at project level on these three files.
//  Note that the files must be included in the project to make this possible. As every .xcconfig file they should
//  not be part of any target, though.
//
//  The variations between projects (and targets) should be handled at the target level. In many cases no configuration
//  differentiation will be necessary at this level, so that a single .xcconfig file per target is sufficient.
//  PWSoftware/BuildSettings contains base target settings which can be included in target-specific .xcconfig files.
//  Currently these are Framework.xcconfig and Application.xcconfig for framework resp. application targets.
//
//  Because we support the OSX and IOS plattforms, configurations are being split into plattform spectfic and global settings
//  This mainly is being expressed by a OSX/IOS suffix and include chain.
//
//  Unfortunately there is a deficiency concerning including .xcconfig files in other .xcconfig files: the including
//  file can only overwrite settings defined in the included file, not extend them. This is due to the fact that
//  no variable references (of the form $(name)) are resolved while parsing the files, they are left as is and are
//  resolved later.
//  To work around this, we use the following scheme. Say Shared.xcconfig (which has no includes) sets a setting
//  named SETTING which is a space separated list. It does it in two steps:
//
//  SHARED_SETTING = value1
//  SETTING = $(inherited) $(SHARED_SETTING)
//
//  Note: $(inherited) (equivalent to $(value)) is used to extend settings across build settings levels, which is
//  different from .xcconfig includes, which all together belong to one level. This difference is one reason to
//  separate settings between project and target levels as described above.
//
//  If Release.xcconfig includes Shared.xcconfig and wants to extend SETTING, it does it as follows:
//
//  RELEASE_SETTING = $(SHARED_SETTING) value2
//  SETTING = $(inherited) $(RELEASE_SETTING)
//
//  This scheme even works if Release.xcconfig wants to extend SETTING2, which is not mentioned at all in
//  Shared.xcconfig:
//
//  RELEASE_SETTING2 = $(SHARED_SETTING2) value3
//  SETTING2 = $(inherited) $(RELEASE_SETTING2)
//
//  The undefined SHARED_SETTING2 simply resolves to empty.
//
//  Unfortunately the scheme does not work so well if the include hierachy becomes deeper: If MyProjectRelease.xcconfig
//  includes Release.xcconfig, it does not know about Shared.xcconfig and whether it should use names like
//  RELEASE_SETTING3 or SHARED_SETTING3.

DEBUG_INFORMATION_FORMAT = dwarf-with-dsym

GCC_VERSION = com.apple.compilers.llvm.clang.1_0
GCC_C_LANGUAGE_STANDARD = gnu99
CLANG_CXX_LANGUAGE_STANDARD = gnu++11   // gnu++11 gnu++98

CLANG_CXX_LIBRARY = libc++

COMBINE_HIDPI_IMAGES = NO   // TODO: currently fails at least under Jenkins.

// Stripping of debug symbols from signed binaries is not possible anyway and leads
// to warnings as of Xcode 5.1. Therefore we simply disable it as we do not see any
// benefit in stripping symbols during copying as they are stripped during linking.
COPY_PHASE_STRIP = NO

// Most of our code uses ARC. The few exceptions must overwrite this default.
CLANG_ENABLE_OBJC_ARC = YES
GCC_ENABLE_OBJC_GC    = unsupported

GCC_PRECOMPILE_PREFIX_HEADER = YES
//GCC_WARN_FOUR_CHARACTER_CONSTANTS = NO

// Recommended by Xcode 7
GCC_NO_COMMON_BLOCKS = YES

// Comment in Xcode: For backwards compatibility reasons, this setting is enabled by default, but disabling it
// is strongly recommended.
ALWAYS_SEARCH_USER_PATHS = NO

// A safe default, can be overwritten in application targets
GCC_DYNAMIC_NO_PIC = NO

// Run non-trivial default constructors and destructors on C++ instance variables of Objective-C classes.
// Note: on is the compiler-default anyway, but just to make sure this will never catch us it does not hurt
// to specify it here.
GCC_OBJC_CALL_CXX_CDTORS = YES

// __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES: Disable assert macros without underscore (like check(),
//   verify(), and many more). They are way too likely to match  something and generate strange erros.
//   See AssertMacros.h for more details.
// NS_BUILD_32_LIKE_64: enabling this option makes the definition of some basic types in 32 bit compatible with
//   64 bits. Specifically the geometric types (NSPoint and friends) are always typedefed to their CG counterparts
//   and NS[U]Integer is always defined as [unsigned] long. Does not change anything in the bit layout under 32 bits.
// HAS_DEBUG_OPTIONS: the debug menu is always availbale. Release builds control its visibility by a user setting.
SHARED_GCC_PREPROCESSOR_DEFINITIONS = __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES=0 NS_BUILD_32_LIKE_64=1 HAS_DEBUG_OPTIONS=1
GCC_PREPROCESSOR_DEFINITIONS = $(inherited) $(SHARED_GCC_PREPROCESSOR_DEFINITIONS)

// TODO: understand and consider this: OTHER_CFLAGS = $(inherited) -Wimplicit-function-declaration

// -fno-objc-arc-exceptions: by default ARC is exception safe in Objective-C++ and unsafe in normal Objective-C code.
// Since we do not used exceptions outside of carefully controlled cases, we disable this (considerable) overhead by
// default. Note that with this setting leaks are expected in the presence of exceptions.
// The carefully controlled cases which use exceptions in normal operation are:
// - Inside MEGraph for stopping boost graph visitors. No ARC is involved in these cases.

// -Wno-tautological-compare: Clang in Xcode 4.6 introduced this warning, which hit in some ASSERTs in our code and one
// in Boost. We need the ASSERTs to make sure enums are not extended beyond a given limit, therefore we disable the warning.

// Note: We do not put this into OTHER_CFLAGS because as of Xcode 6.3, clang warns about compiler options which
// which do not make sense in the compilation context.
OTHER_CPLUSPLUSFLAGS = $(inherited) -fno-objc-arc-exceptions -Wno-tautological-compare

// Never warn about extensions like auto, even if C++ 11 is not in use.
CLANG_WARN_CXX0X_EXTENSIONS = NO

// Warnings
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_UNUSED_VARIABLE = YES
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_UNKNOWN_PRAGMAS = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_VALUE = YES
CLANG_WARN_CONSTANT_CONVERSION = YES
CLANG_WARN_INT_CONVERSION = YES
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
GCC_WARN_UNINITIALIZED_AUTOS = YES
GCC_WARN_SHADOW = YES
GCC_WARN_MISSING_PARENTHESES = YES
CLANG_WARN_BOOL_CONVERSION = YES
CLANG_WARN_EMPTY_BODY = YES
CLANG_WARN_ENUM_CONVERSION = YES
GCC_WARN_UNDECLARED_SELECTOR = YES
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES
CLANG_WARN_UNREACHABLE_CODE = YES;

CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = NO
CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR

// Warnings to be considered:
//GCC_WARN_64_TO_32_BIT_CONVERSION = YES;   suggested by upgrade to Xcode 5.1

// Warnings which are off for good reason.
GCC_WARN_UNUSED_PARAMETER = NO
GCC_WARN_PEDANTIC = NO
GCC_WARN_EFFECTIVE_CPLUSPLUS_VIOLATIONS = NO
GCC_WARN_STRICT_SELECTOR_MATCH = NO
GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR = NO
GCC_WARN_ABOUT_MISSING_PROTOTYPES = NO
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = NO
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES // is useful for weakSelf in blocks, but terribly noisy for IBOutlets

// Switch off interface builder warnings until the auto layout related warning in Xcode 5 are fixed.
IBC_WARNINGS = NO

// __attribute__((no_sanitize_thread)) is not compatible with gcc, but who cares?
WARNING_CFLAGS = -Wno-gcc-compat

// Static Analyzer
CLANG_ANALYZER_NONNULL = YES

// Disable obsolete features
PREBINDING = NO

INFOPLIST_PREPROCESS = yes
// Prevents the double-slashes of URLs in Info.plists not to be treated as a preprocessor comments. 
// Comments in Info.plists have to use the traditional form /* */
INFOPLIST_OTHER_PREPROCESSOR_FLAGS = -traditional

LD_RUNPATH_SEARCH_PATHS = @executable_path/../Frameworks

CLANG_ENABLE_MODULES = YES

ENABLE_STRICT_OBJC_MSGSEND = YES;
ONLY_ACTIVE_ARCH = YES;
